# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import mnode.service_pb2 as service_pb2


class XrayServiceBase(abc.ABC):

    @abc.abstractmethod
    async def XrayStart(self, stream: 'grpclib.server.Stream[service_pb2.XrayStartRequest, service_pb2.XrayStartResponse]') -> None:
        pass

    @abc.abstractmethod
    async def XrayRestart(self, stream: 'grpclib.server.Stream[service_pb2.XrayRestartRequest, service_pb2.XrayRestartResponse]') -> None:
        pass

    @abc.abstractmethod
    async def XrayStop(self, stream: 'grpclib.server.Stream[service_pb2.XrayStopRequest, service_pb2.XrayStopResponse]') -> None:
        pass

    @abc.abstractmethod
    async def XrayFetchVersion(self, stream: 'grpclib.server.Stream[service_pb2.XrayFetchVersionRequest, service_pb2.XrayFetchVersionResponse]') -> None:
        pass

    @abc.abstractmethod
    async def XrayLogsStream(self, stream: 'grpclib.server.Stream[service_pb2.XrayLogsRequest, service_pb2.XrayLogsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/mnode.XrayService/XrayStart': grpclib.const.Handler(
                self.XrayStart,
                grpclib.const.Cardinality.UNARY_UNARY,
                service_pb2.XrayStartRequest,
                service_pb2.XrayStartResponse,
            ),
            '/mnode.XrayService/XrayRestart': grpclib.const.Handler(
                self.XrayRestart,
                grpclib.const.Cardinality.UNARY_UNARY,
                service_pb2.XrayRestartRequest,
                service_pb2.XrayRestartResponse,
            ),
            '/mnode.XrayService/XrayStop': grpclib.const.Handler(
                self.XrayStop,
                grpclib.const.Cardinality.UNARY_UNARY,
                service_pb2.XrayStopRequest,
                service_pb2.XrayStopResponse,
            ),
            '/mnode.XrayService/XrayFetchVersion': grpclib.const.Handler(
                self.XrayFetchVersion,
                grpclib.const.Cardinality.UNARY_UNARY,
                service_pb2.XrayFetchVersionRequest,
                service_pb2.XrayFetchVersionResponse,
            ),
            '/mnode.XrayService/XrayLogsStream': grpclib.const.Handler(
                self.XrayLogsStream,
                grpclib.const.Cardinality.UNARY_STREAM,
                service_pb2.XrayLogsRequest,
                service_pb2.XrayLogsResponse,
            ),
        }


class XrayServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.XrayStart = grpclib.client.UnaryUnaryMethod(
            channel,
            '/mnode.XrayService/XrayStart',
            service_pb2.XrayStartRequest,
            service_pb2.XrayStartResponse,
        )
        self.XrayRestart = grpclib.client.UnaryUnaryMethod(
            channel,
            '/mnode.XrayService/XrayRestart',
            service_pb2.XrayRestartRequest,
            service_pb2.XrayRestartResponse,
        )
        self.XrayStop = grpclib.client.UnaryUnaryMethod(
            channel,
            '/mnode.XrayService/XrayStop',
            service_pb2.XrayStopRequest,
            service_pb2.XrayStopResponse,
        )
        self.XrayFetchVersion = grpclib.client.UnaryUnaryMethod(
            channel,
            '/mnode.XrayService/XrayFetchVersion',
            service_pb2.XrayFetchVersionRequest,
            service_pb2.XrayFetchVersionResponse,
        )
        self.XrayLogsStream = grpclib.client.UnaryStreamMethod(
            channel,
            '/mnode.XrayService/XrayLogsStream',
            service_pb2.XrayLogsRequest,
            service_pb2.XrayLogsResponse,
        )
